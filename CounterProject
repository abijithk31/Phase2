>>CounterViewModel
                using System;
                using System.Collections.Generic;
                using System.ComponentModel;
                using System.Linq;
                using System.Text;
                using System.Threading.Tasks;
                using System.Windows.Input;
                
                namespace CounterMvvm
                {
                    public class CounterViewModel : INotifyPropertyChanged
                    {
                        public event PropertyChangedEventHandler PropertyChanged;
                        public void OnPropertyChanged(string propertyName)
                        {
                            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
                        }
                
                		private int _counter = 0;
                
                		public int Counter
                		{
                			get { return _counter; }
                			set { _counter = value; OnPropertyChanged("Counter"); }
                		}
                        public ICommand Incrementcommand { get; }
                        public ICommand Decrementcommand { get; }
                        public CounterViewModel()
                        {
                            Incrementcommand = new RelayCommand(Increment);
                            
                            Decrementcommand = new RelayCommand(Decrement);
                        }
                        void Increment()
                        {
                            Counter++;
                        }
                        void Decrement() { Counter--; }
                
                
                
                    }
                }


>>MainWindow
                        <Window x:Class="CounterMvvm.MainWindow"
                                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                                xmlns:local="clr-namespace:CounterMvvm"
                                mc:Ignorable="d"
                                Title="MainWindow" Height="450" Width="800">
                            <Grid>
                                <TextBox Text="{Binding Counter}" HorizontalAlignment="Center" Margin="0,129,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="120" Height="75"/>
                                <Button Content="+" HorizontalAlignment="Left" Margin="270,229,0,0" VerticalAlignment="Top" Height="45" Width="65" FontSize="30" Command="{Binding Incrementcommand}"/>
                                <Button Content="-" HorizontalAlignment="Left" Margin="460,229,0,0" VerticalAlignment="Top" Height="45" Width="60" FontSize="30" Command="{Binding Decrementcommand}"/>
                        
                            </Grid>
                        </Window>



>>RelayCommand
                      using System;
                      using System.Collections.Generic;
                      using System.Linq;
                      using System.Text;
                      using System.Threading.Tasks;
                      using System.Windows.Input;
                      
                      namespace CounterMvvm
                      {
                          public class RelayCommand : ICommand
                          {
                              private readonly Action _execute;
                              private readonly Func<bool> _canExecute;
                      
                              public RelayCommand(Action execute, Func<bool> canExecute = null)
                              {
                                  _execute = execute ?? throw new ArgumentNullException(nameof(execute));
                                  _canExecute = canExecute;
                              }
                              //
                      
                              public event EventHandler CanExecuteChanged
                              {
                                  add { CommandManager.RequerySuggested += value; }
                                  remove { CommandManager.RequerySuggested -= value; }
                              }
                              //
                              public bool CanExecute(object parameter)
                              {
                                  return _canExecute == null || _canExecute();
                              }
                      
                              public void Execute(object parameter)
                              {
                                  _execute();
                              }
                          }
                      }

